// День 7: Генерики (обобщения)

// Задача 1: Создайте обобщенную функцию, которая принимает массив любого типа и возвращает его первый элемент.
function getFirstElement<T>(arr: T[]): T {
   return arr[0];
 }
 
 // Задача 2: Создайте обобщенную функцию, которая принимает два параметра любого типа и возвращает их в виде кортежа.
 function pair<T, U>(a: T, b: U): [T, U] {
   return [a, b];
 }
 
 // Задача 3: Создайте обобщенную функцию, которая принимает массив любого типа и возвращает его длину.
 function getLength<T>(arr: T[]): number {
   return arr.length;
 }
 
 // Задача 4: Создайте обобщенную функцию, которая принимает объект и возвращает массив его значений.
 function getValues<T>(obj: T): any[] {
   return Object.values(obj);
 }
 
 // Задача 5: Создайте обобщенную функцию, которая принимает массив и возвращает его отсортированную версию.
 function sortArray<T>(arr: T[]): T[] {
   return arr.sort();
 }
 
 // Задача 6: Создайте обобщенную функцию, которая принимает массив и возвращает новый массив, содержащий только уникальные элементы.
 function getUniqueElements<T>(arr: T[]): T[] {
   return Array.from(new Set(arr));
 }
 
 // Задача 7: Создайте обобщенную функцию, которая принимает объект и возвращает массив его ключей.
 function getKeys<T>(obj: T): Array<keyof T> {
   return Object.keys(obj) as Array<keyof T>;
 }
 
 // Задача 8: Создайте обобщенную функцию, которая принимает массив и значение, и возвращает количество вхождений этого значения в массив.
 function countOccurrences<T>(arr: T[], value: T): number {
   return arr.filter(v => v === value).length;
 }
 
 // Задача 9: Создайте обобщенную функцию, которая принимает два массива и возвращает их объединение.
 function mergeArrays<T>(arr1: T[], arr2: T[]): T[] {
   return [...arr1, ...arr2];
 }
 
 // Задача 10: Создайте обобщенную функцию, которая принимает массив и значение, и возвращает новый массив с добавленным значением.
 function appendValue<T>(arr: T[], value: T): T[] {
   return [...arr, value];
 }
 