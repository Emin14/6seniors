// День 11: Продвинутые Generics

// Задача 1: Создайте обобщенную функцию, которая принимает два аргумента любого типа и возвращает их в виде кортежа.
function createTuple(a, b) {
   return [a, b];
 }
 
 // Задача 2: Напишите обобщенную функцию, которая принимает массив и возвращает последний элемент этого массива.
 function getLastElement(arr) {
   return arr[arr.length - 1];
 }
 
 // Задача 3: Создайте обобщенную функцию, которая принимает массив объектов и ключ, и возвращает массив значений этого ключа.
 function pluck(arr, key) {
   return arr.map(item => item[key]);
 }
 
 // Задача 4: Напишите обобщенную функцию, которая принимает два массива и объединяет их в один.
 function mergeArrays(arr1, arr2) {
   return [...arr1, ...arr2];
 }
 
 // Задача 5: Реализуйте обобщенную функцию, которая принимает объект и массив ключей, и возвращает новый объект с указанными ключами.
 function selectKeys(obj, keys) {
   let result = {};
   keys.forEach(key => {
     if (key in obj) {
       result[key] = obj[key];
     }
   });
   return result;
 }
 
 // Задача 6: Создайте обобщенную функцию, которая принимает массив и возвращает новый массив, где каждый элемент удваивается.
 function doubleValues(arr) {
   return arr.map(x => x * 2);
 }
 
 // Задача 7: Реализуйте обобщенную функцию для фильтрации массива по условию, заданному в виде функции обратного вызова.
 function filterArray(arr, callback) {
   return arr.filter(callback);
 }
 
 // Задача 8: Напишите обобщенную функцию, которая принимает массив строк и возвращает новый массив с длинами этих строк.
 function getStringLengths(arr) {
   return arr.map(str => str.length);
 }
 
 // Задача 9: Создайте обобщенную функцию, которая принимает объект и возвращает массив его значений.
 function getObjectValues(obj) {
   return Object.values(obj);
 }
 
 // Задача 10: Напишите обобщенную функцию, которая принимает массив объектов и сортирует его по заданному ключу.
 function sortByKey(arr, key) {
   return arr.sort((a, b) => (a[key] > b[key] ? 1 : -1));
 }

 
 